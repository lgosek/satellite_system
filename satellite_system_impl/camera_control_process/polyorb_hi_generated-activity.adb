--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI.Port_Kinds;
with System;
with PolyORB_HI_Generated.Marshallers;
with PolyORB_HI_Generated.Transport;
with PolyORB_HI.Thread_Interrogators;
pragma Elaborate_All (PolyORB_HI.Thread_Interrogators);
with PolyORB_HI_Generated.Subprograms;

package body PolyORB_HI_Generated.Activity is

  --  BEGIN: Data types used by all instances of component send_photo.impl

  type satellite_sys_send_photo_impl_Integer_Array is
   array (satellite_sys_send_photo_impl_Port_Type)
     of Standard.Integer;

  type satellite_sys_send_photo_impl_Port_Kind_Array is
   array (satellite_sys_send_photo_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Camera_Control_Process_1_Max_Port_Image_Size is
   Integer range 1 .. PolyORB_HI_Generated.Deployment.Max_Port_Image_Size;

  subtype UT_Activity_Camera_Control_Process_satellite_sys_send_photo_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Camera_Control_Process_1_Max_Port_Image_Size);

  type satellite_sys_send_photo_impl_Port_Image_Array is
   array (satellite_sys_send_photo_impl_Port_Type)
     of UT_Activity_Camera_Control_Process_satellite_sys_send_photo_impl_Port_Image_Array_Component;

  type satellite_sys_send_photo_impl_Address_Array is
   array (satellite_sys_send_photo_impl_Port_Type)
     of System.Address;

  type satellite_sys_send_photo_impl_Overflow_Protocol_Array is
   array (satellite_sys_send_photo_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component send_photo.impl

  satellite_sys_photo_send_Port_Kinds : constant satellite_sys_send_photo_impl_Port_Kind_Array :=
   (photo_in =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    photo_out =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  satellite_sys_photo_send_Port_Images : constant satellite_sys_send_photo_impl_Port_Image_Array :=
   (photo_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.camera_control_process_photo_send_photo_in_K),
    photo_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.camera_control_process_photo_send_photo_out_K));

  satellite_sys_photo_send_FIFO_Sizes : constant satellite_sys_send_photo_impl_Integer_Array :=
   (photo_in =>
     1,
    photo_out =>
     -1);

  satellite_sys_photo_send_Offsets : constant satellite_sys_send_photo_impl_Integer_Array :=
   (photo_in =>
     1,
    photo_out =>
     0);

  satellite_sys_photo_send_Overflow_Protocols : constant satellite_sys_send_photo_impl_Overflow_Protocol_Array :=
   (photo_in =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    photo_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  satellite_sys_photo_send_Urgencies : constant satellite_sys_send_photo_impl_Integer_Array :=
   (photo_in =>
     0,
    photo_out =>
     0);

  satellite_sys_photo_send_Total_FIFO_Size : constant Standard.Integer :=
   1;

  satellite_sys_photo_send_N_Destinations : constant satellite_sys_send_photo_impl_Integer_Array :=
   (photo_in =>
     0,
    photo_out =>
     0);

  photo_send_Destinations : constant satellite_sys_send_photo_impl_Address_Array :=
   (photo_in =>
     System.null_Address,
    photo_out =>
     System.null_Address);

  package satellite_sys_photo_send_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => satellite_sys_send_photo_impl_Port_Type,
      Integer_Array => satellite_sys_send_photo_impl_Integer_Array,
      Port_Kind_Array => satellite_sys_send_photo_impl_Port_Kind_Array,
      Port_Image_Array => satellite_sys_send_photo_impl_Port_Image_Array,
      Address_Array => satellite_sys_send_photo_impl_Address_Array,
      Overflow_Protocol_Array => satellite_sys_send_photo_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => satellite_sys_send_photo_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.camera_control_process_photo_send_K,
      Thread_Port_Kinds => satellite_sys_photo_send_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => satellite_sys_photo_send_Port_Images,
      Thread_Fifo_Sizes => satellite_sys_photo_send_FIFO_Sizes,
      Thread_Fifo_Offsets => satellite_sys_photo_send_Offsets,
      Thread_Overflow_Protocols => satellite_sys_photo_send_Overflow_Protocols,
      Urgencies => satellite_sys_photo_send_Urgencies,
      Global_Data_Queue_Size => satellite_sys_photo_send_Total_FIFO_Size,
      N_Destinations => satellite_sys_photo_send_N_Destinations,
      Destinations => photo_send_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => satellite_sys_photo_send_Task.Next_Deadline);

  --  Periodic task : photo_send

  ----------------------------------
  -- satellite_sys_photo_send_Job -- 
  ----------------------------------

  function satellite_sys_photo_send_Job return PolyORB_HI.Errors.Error_Kind is
    photo_in_V : PolyORB_HI_Generated.Types.photo_data;
    photo_out_V : PolyORB_HI_Generated.Types.photo_data;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (satellite_sys_photo_send_Interrogators.Get_Count
     (photo_in)
      /= -1)
    then
      photo_in_V :=
       satellite_sys_photo_send_Interrogators.Get_Value
         (photo_in).photo_in_DATA;
    else
      photo_in_V :=
       PolyORB_HI_Generated.Types.photo_data_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.satellite_sys_send_photo_spg
     (photo_in => photo_in_V,
      photo_out => photo_out_V);
    --  Set the call sequence OUT port values
    satellite_sys_photo_send_Interrogators.Put_Value
     (satellite_sys_send_photo_impl_Interface'
       (Port => photo_out,
        photo_out_DATA => photo_out_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     satellite_sys_photo_send_Interrogators.Send_Output
       (photo_out);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end satellite_sys_photo_send_Job;

  --  BEGIN: Data types used by all instances of component get_photo.impl

  type satellite_sys_get_photo_impl_Integer_Array is
   array (satellite_sys_get_photo_impl_Port_Type)
     of Standard.Integer;

  type satellite_sys_get_photo_impl_Port_Kind_Array is
   array (satellite_sys_get_photo_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Camera_Control_Process_satellite_sys_get_photo_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Camera_Control_Process_1_Max_Port_Image_Size);

  type satellite_sys_get_photo_impl_Port_Image_Array is
   array (satellite_sys_get_photo_impl_Port_Type)
     of UT_Activity_Camera_Control_Process_satellite_sys_get_photo_impl_Port_Image_Array_Component;

  type satellite_sys_get_photo_impl_Address_Array is
   array (satellite_sys_get_photo_impl_Port_Type)
     of System.Address;

  type satellite_sys_get_photo_impl_Overflow_Protocol_Array is
   array (satellite_sys_get_photo_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component get_photo.impl

  satellite_sys_photo_trigger_Port_Kinds : constant satellite_sys_get_photo_impl_Port_Kind_Array :=
   (photo_trigger_in =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    photo_trigger_out =>
     PolyORB_HI.Port_Kinds.Out_Event_Port);

  satellite_sys_photo_trigger_Port_Images : constant satellite_sys_get_photo_impl_Port_Image_Array :=
   (photo_trigger_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.camera_control_process_photo_trigger_photo_trigger_in_K),
    photo_trigger_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.camera_control_process_photo_trigger_photo_trigger_out_K));

  satellite_sys_photo_trigger_FIFO_Sizes : constant satellite_sys_get_photo_impl_Integer_Array :=
   (photo_trigger_in =>
     16,
    photo_trigger_out =>
     -1);

  satellite_sys_photo_trigger_Offsets : constant satellite_sys_get_photo_impl_Integer_Array :=
   (photo_trigger_in =>
     1,
    photo_trigger_out =>
     0);

  satellite_sys_photo_trigger_Overflow_Protocols : constant satellite_sys_get_photo_impl_Overflow_Protocol_Array :=
   (photo_trigger_in =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    photo_trigger_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  satellite_sys_photo_trigger_Urgencies : constant satellite_sys_get_photo_impl_Integer_Array :=
   (photo_trigger_in =>
     0,
    photo_trigger_out =>
     0);

  satellite_sys_photo_trigger_Total_FIFO_Size : constant Standard.Integer :=
   16;

  satellite_sys_photo_trigger_N_Destinations : constant satellite_sys_get_photo_impl_Integer_Array :=
   (photo_trigger_in =>
     0,
    photo_trigger_out =>
     0);

  photo_trigger_Destinations : constant satellite_sys_get_photo_impl_Address_Array :=
   (photo_trigger_in =>
     System.null_Address,
    photo_trigger_out =>
     System.null_Address);

  package satellite_sys_photo_trigger_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => satellite_sys_get_photo_impl_Port_Type,
      Integer_Array => satellite_sys_get_photo_impl_Integer_Array,
      Port_Kind_Array => satellite_sys_get_photo_impl_Port_Kind_Array,
      Port_Image_Array => satellite_sys_get_photo_impl_Port_Image_Array,
      Address_Array => satellite_sys_get_photo_impl_Address_Array,
      Overflow_Protocol_Array => satellite_sys_get_photo_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => satellite_sys_get_photo_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.camera_control_process_photo_trigger_K,
      Thread_Port_Kinds => satellite_sys_photo_trigger_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => satellite_sys_photo_trigger_Port_Images,
      Thread_Fifo_Sizes => satellite_sys_photo_trigger_FIFO_Sizes,
      Thread_Fifo_Offsets => satellite_sys_photo_trigger_Offsets,
      Thread_Overflow_Protocols => satellite_sys_photo_trigger_Overflow_Protocols,
      Urgencies => satellite_sys_photo_trigger_Urgencies,
      Global_Data_Queue_Size => satellite_sys_photo_trigger_Total_FIFO_Size,
      N_Destinations => satellite_sys_photo_trigger_N_Destinations,
      Destinations => photo_trigger_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => satellite_sys_photo_trigger_Task.Next_Deadline);

  --  Periodic task : photo_trigger

  -------------------------------------
  -- satellite_sys_photo_trigger_Job -- 
  -------------------------------------

  function satellite_sys_photo_trigger_Job return PolyORB_HI.Errors.Error_Kind is
    Error_Ü : constant PolyORB_HI.Errors.Error_Kind :=
     PolyORB_HI.Errors.Error_None;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    satellite_sys_photo_trigger_Interrogators.Next_Value
     (satellite_sys_get_photo_impl_Port_Type'
       (photo_trigger_in));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.satellite_sys_get_photo_spg;
    --  Return error code
    return Error_Ü;
  end satellite_sys_photo_trigger_Job;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_send_photo_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return satellite_sys_photo_send_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : satellite_sys_send_photo_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    satellite_sys_photo_send_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_send_photo_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    satellite_sys_photo_send_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_send_photo_impl_Port_Type)
   return satellite_sys_send_photo_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return satellite_sys_photo_send_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_send_photo_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return satellite_sys_photo_send_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_send_photo_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return satellite_sys_photo_send_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_send_photo_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return satellite_sys_photo_send_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_send_photo_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    satellite_sys_photo_send_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : satellite_sys_send_photo_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    satellite_sys_photo_send_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out satellite_sys_send_photo_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    satellite_sys_photo_send_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_get_photo_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return satellite_sys_photo_trigger_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : satellite_sys_get_photo_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    satellite_sys_photo_trigger_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_get_photo_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    satellite_sys_photo_trigger_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_get_photo_impl_Port_Type)
   return satellite_sys_get_photo_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return satellite_sys_photo_trigger_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_get_photo_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return satellite_sys_photo_trigger_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_get_photo_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return satellite_sys_photo_trigger_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_get_photo_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return satellite_sys_photo_trigger_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : satellite_sys_get_photo_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    satellite_sys_photo_trigger_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : satellite_sys_get_photo_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    satellite_sys_photo_trigger_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out satellite_sys_get_photo_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    satellite_sys_photo_trigger_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

end PolyORB_HI_Generated.Activity;
