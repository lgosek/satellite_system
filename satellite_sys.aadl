package satellite_sys
public
	with deployment;
	with data_types;
	
	system satellite_system
	end satellite_system;
	
	system implementation satellite_system.impl
	subcomponents
		alt_sensor: device altitude_sensor;
		correction_engine_1: device correction_engine;
		correction_engine_2: device correction_engine;
		correction_engine_3: device correction_engine;
		correction_engine_4: device correction_engine;
		correction_engine_5: device correction_engine;
		correction_engine_6: device correction_engine;
		
		cam: device camera;
		comm_unit: device communication_unit;
		cam_comm: device camera_communication;
		gyro: device gyroscope;
		
		cpu1: PROCESSOR CPU;
		cpu2: PROCESSOR CPU;

		controller_process: process controller.with_threads;
--		camera_control_process: process camera_controller.impl;
		
		VME: BUS VME;
		RAM: MEMORY RAM;

	connections
		c1: port cam.photo_out -> controller_process.cam_photo_in;
		c2: port controller_process.cam_photo_out -> cam_comm.photo_in;
		c3: port alt_sensor.alt_out -> controller_process.alt_in;

		c4: port comm_unit.toggle_manual_control -> controller_process.toggle_manual_control;
		--manual_controls_conn: feature comm_unit.manual_controls -> controller_process.manual_controls_in;
		c5: port comm_unit.manual_controls -> controller_process.manual_controls;
		
		c6: port controller_process.engine_1_toggle -> correction_engine_1.toggle;
		c7: port controller_process.engine_2_toggle -> correction_engine_2.toggle;
		c8: port controller_process.engine_3_toggle -> correction_engine_3.toggle;
		c9: port controller_process.engine_4_toggle -> correction_engine_4.toggle;
		c10: port controller_process.engine_5_toggle -> correction_engine_5.toggle;
		c11: port controller_process.engine_6_toggle -> correction_engine_6.toggle;
--		comm_to_cam_conn: port cam_comm.take_photo_signal -> cam.take_photo;
		c12: port controller_process.rotation -> gyro.rotation;
		
		c13: port cam_comm.take_photo_signal -> controller_process.cam_trigger_in;
		c14: port controller_process.cam_trigger_out -> cam.take_photo;
		
		A1: BUS ACCESS VME -> cpu1.VME;
		A2: BUS ACCESS VME -> cpu2.VME;
		A3: BUS ACCESS VME -> RAM.VME;
		A4: BUS ACCESS VME -> alt_sensor.VME;
		A5: BUS ACCESS VME -> cam.VME;
		A6: BUS ACCESS VME -> comm_unit.VME;
		A7: BUS ACCESS VME -> cam_comm.VME;
		A8: BUS ACCESS VME -> correction_engine_1.VME;
		A9: BUS ACCESS VME -> correction_engine_2.VME;
		A10: BUS ACCESS VME -> correction_engine_3.VME;
		A11: BUS ACCESS VME -> correction_engine_4.VME;
		A12: BUS ACCESS VME -> correction_engine_5.VME;
		A13: BUS ACCESS VME -> correction_engine_6.VME;
		A14: bus access VME -> gyro.VME;
		
		
		
		properties
			Actual_Processor_Binding => (reference (cpu1)) applies to controller_process;
--			Actual_Processor_Binding => (reference (cpu2)) applies to camera_control_process;
			Actual_Memory_Binding => (reference (ram)) applies to controller_process;
--			Actual_Memory_Binding => (reference (ram)) applies to camera_control_process;
end satellite_system.impl;
	
	
	-- ==================Camera process
	process camera_controller
		features
			cam_photo_in: in data port data_types::photo_data;
			cam_photo_out: out data port data_types::photo_data;
			cam_trigger_in: in event port;
			cam_trigger_out: out event port;
	end camera_controller;
	
	-- --------------Implementation
	process implementation camera_controller.impl
	subcomponents
		photo_send: thread send_photo.impl;
		photo_trigger: thread get_photo.impl;
	connections
		c1: port cam_trigger_in -> photo_trigger.photo_trigger_in;
		c2: port photo_trigger.photo_trigger_out -> cam_trigger_out;
		c3: port cam_photo_in -> photo_send.photo_in;
		c4: port photo_send.photo_out -> cam_photo_out;
	end camera_controller.impl;

	-- -------------------- Send Photo Thread
	thread send_photo
		features
			photo_in: in data port data_types::photo_data;
			photo_out: out data port data_types::photo_data;
	end send_photo;
	-- --------------------- Thread implementation
	thread implementation send_photo.impl
		calls
			MyCalls: {
				send_photo_spg: subprogram send_photo_spg;
			};
		connections
			c0: parameter photo_in -> send_photo_spg.photo_in;
			c1: parameter send_photo_spg.photo_out -> photo_out;
		properties
			Priority => 10;
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 200ms .. 250ms;
			Deadline => 300ms;
			Period => 300ms;
	end send_photo.impl;
	
	-- ---------------------- Subprogram
	subprogram send_photo_spg
			features
				photo_in: in parameter data_types::photo_data;
				photo_out: out parameter data_types::photo_data;
				
			properties
				source_language => (Ada95);
				source_name => "satellite.send_photo";
		end send_photo_spg;
		
	-- ------------------- Thread get_photo		
	thread get_photo
		features
			photo_trigger_in: in event port;
			photo_trigger_out: out event port;
	end get_photo;
	
	-- --------------------- thread implementation
	thread implementation get_photo.impl
		calls
			MyCalls: {
				get_photo_spg: subprogram get_photo_spg;
			};		
		properties
			Priority => 5;
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 5ms .. 5ms;
			Deadline => 300ms;
			Period => 300ms;
	end get_photo.impl;
	
	-- ---------------- subprogram
	subprogram get_photo_spg
		properties
			source_language => (Ada95);
			source_name => "satellite.get_photo";
	end get_photo_spg;
	
	
	-- ================ Controller process
	process controller
		features
			alt_in: in data port data_types::mov_data;
			toggle_manual_control: in data port data_types::toggle_data;
			
			manual_controls: in data port data_types::Satellite_Controls.impl;
			
			engine_1_toggle: out data port data_types::toggle_data;
			engine_2_toggle: out data port data_types::toggle_data;
			engine_3_toggle: out data port data_types::toggle_data;
			engine_4_toggle: out data port data_types::toggle_data;
			engine_5_toggle: out data port data_types::toggle_data;
			engine_6_toggle: out data port data_types::toggle_data;
			rotation: out data port data_types::mov_data;
			
			cam_photo_in: in data port data_types::photo_data;
			cam_photo_out: out data port data_types::photo_data;
			cam_trigger_in: in event port;
			cam_trigger_out: out event port;
	end controller;
	
	-- -------------------- Controller implementation
	process implementation controller.with_threads
	subcomponents
		alt_reader: thread read_altitude.impl;
		alt_controller: thread altitude_controll.impl;
		photo_send: thread send_photo.impl;
		photo_trigger: thread get_photo.impl;
	connections
		c1: port alt_in -> alt_reader.alt_in;
		c2: port alt_reader.alt_out -> alt_controller.alt_in;
		c3: port toggle_manual_control -> alt_controller.toggle_manual_control;
		c4: port manual_controls -> alt_controller.manual_controls;
		c5: port alt_controller.engine_1_control -> engine_1_toggle;
		c6: port alt_controller.engine_2_control -> engine_2_toggle;
		c7: port alt_controller.engine_3_control -> engine_3_toggle;
		c8: port alt_controller.engine_4_control -> engine_4_toggle;
		c9: port alt_controller.engine_5_control -> engine_5_toggle;
		c10: port alt_controller.engine_6_control -> engine_6_toggle;
		c11: port alt_controller.rotation -> rotation;
		
		c12: port cam_trigger_in -> photo_trigger.photo_trigger_in;
		c13: port photo_trigger.photo_trigger_out -> cam_trigger_out;
		c14: port cam_photo_in -> photo_send.photo_in;
		c15: port photo_send.photo_out -> cam_photo_out;
	end controller.with_threads;

	-- ---------------- Read altitude thread
	thread read_altitude
		features
			alt_in: in data port data_types::mov_data;
			alt_out: out data port data_types::mov_data;
	end read_altitude;
	
	-- ----------------- Thread implementation
	thread implementation read_altitude.impl
		calls
			MyCalls: {
				read_alt_spg: subprogram read_altitude_spg;
			};
		connections
			c0: parameter alt_in -> read_alt_spg.alt_in;
			c1: parameter read_alt_spg.alt_out -> alt_out;
		properties
			Priority => 2;
			Dispatch_Protocol => Periodic;
			Compute_Execution_Time => 30ms .. 30ms;
			Deadline => 200ms;
			Period => 200ms;
	end read_altitude.impl;

	-- ----------------- Subprogram
	subprogram read_altitude_spg
		features
			alt_in: in parameter data_types::mov_data;
			alt_out: out parameter data_types::mov_data;
			
		properties
			source_language => (Ada95);
			source_name => "satellite.read_altitude";
	end read_altitude_spg;
	
	-- ------------------ Altitude control thread
	thread altitude_controll
		features
			alt_in: in data port data_types::mov_data;
			engine_1_control: out data port data_types::toggle_data;
			engine_2_control: out data port data_types::toggle_data;
			engine_3_control: out data port data_types::toggle_data;
			engine_4_control: out data port data_types::toggle_data;
			engine_5_control: out data port data_types::toggle_data;
			engine_6_control: out data port data_types::toggle_data;
			rotation: out data port data_types::mov_data;
			toggle_manual_control: in data port data_types::toggle_data;
			manual_controls: in data port data_types::Satellite_controls.impl;
	end altitude_controll;
	
	-- ---------------- Thread implementation
	thread implementation altitude_controll.impl
		calls
			MyCalls: {
				alt_controll_spg: subprogram alt_controll_spg;
			};
			
		connections
			c0: parameter alt_in -> alt_controll_spg.alt_in;
			c1: parameter toggle_manual_control -> alt_controll_spg.toggle_manual_control;
			c2: parameter manual_controls -> alt_controll_spg.manual_controls;
			
			c3: parameter alt_controll_spg.eng1Out -> engine_1_control; 
			c4: parameter alt_controll_spg.eng2Out -> engine_2_control;
			c5: parameter alt_controll_spg.eng3Out -> engine_3_control;
			c6: parameter alt_controll_spg.eng4Out -> engine_4_control;
			c7: parameter alt_controll_spg.eng5Out -> engine_5_control;
			c8: parameter alt_controll_spg.eng6Out -> engine_6_control;
			c9: parameter alt_controll_spg.rotation -> rotation;
			
		properties
			Priority => 1;
			Compute_Execution_Time => 100ms .. 100ms;
			Dispatch_Protocol => Periodic;
			Deadline => 200ms;
			Period => 200ms;
	end altitude_controll.impl;
	
	-- ------------ Subprogram
	subprogram alt_controll_spg
		features
			alt_in: in parameter data_types::mov_data;
			toggle_manual_control: in parameter data_types::toggle_data;
			manual_controls: in parameter data_types::Satellite_controls.impl;
			
			eng1Out: out parameter data_types::toggle_data;
			eng2Out: out parameter data_types::toggle_data;
			eng3Out: out parameter data_types::toggle_data;
			eng4Out: out parameter data_types::toggle_data;
			eng5Out: out parameter data_types::toggle_data;
			eng6Out: out parameter data_types::toggle_data;
			rotation: out parameter data_types::mov_data;
			
		properties
			source_language => (Ada95);
			source_name => "satellite.altitude_controll";
	end alt_controll_spg;

	-- ========================== Devices
	
	device altitude_sensor
		features
			alt_out: out data port data_types::mov_data;
			VME: REQUIRES BUS ACCESS VME;
		properties
			Compute_Execution_Time => 1ms .. 2ms;
			Deadline => 1ms;
			Period => 1ms;
	end altitude_sensor;
	
	device correction_engine
		features
			toggle: in data port data_types::toggle_data;
			VME: REQUIRES BUS ACCESS VME;
		properties
			Compute_Execution_Time => 4ms .. 4ms;
			Deadline => 10ms;
			Period => 10ms;
	end correction_engine;
	
	device camera
		features
			take_photo: in event port;
			photo_out: out data port data_types::photo_data;
			VME: REQUIRES BUS ACCESS VME;
		properties
			Compute_Execution_Time => 60ms .. 80ms;
			Deadline => 100ms;
			Period => 100ms;
	end camera;
	
	device communication_unit
		features
			toggle_manual_control: out data port data_types::toggle_data;
			manual_controls: out data port data_types::Satellite_controls.impl;
			VME: REQUIRES BUS ACCESS VME;
		properties
			Compute_Execution_Time => 10ms .. 20ms;
			Deadline => 1000ms;
			Period => 1000ms;
	end communication_unit;
	

	device camera_communication
		features
			take_photo_signal: out event port;
			photo_in: in data port data_types::photo_data;
			VME: REQUIRES BUS ACCESS VME;
	end camera_communication;
	
	device gyroscope
		features
			rotation: in data port data_types::mov_data;
			VME: REQUIRES BUS ACCESS VME;
	end gyroscope;
	
	PROCESSOR CPU
		FEATURES
			VME: REQUIRES BUS ACCESS VME;
		PROPERTIES 
			Clock_Period => 200ns;
			Scheduling_Protocol => (POSIX_1003_HIGHEST_PRIORITY_FIRST_PROTOCOL); 
			Deployment::Execution_Platform => Native;
			Priority_Range => 0 .. 255;
	END CPU;
	
	MEMORY RAM
		FEATURES
			VME: REQUIRES BUS ACCESS VME;
	END RAM;
	
	BUS VME
	END VME;
	
	
end satellite_sys;